{"version":3,"sources":["corna.js","App.js","serviceWorker.js","index.js"],"names":["colors","reverse","joinData","geodata","ncovData","ncovDataObj","forEach","item","countryName","countryEnglishName","currentConfirmedCount","confirmedCount","suspectedCount","curedCount","deadCount","geoObj","features","feature","name","properties","ncov","World","React","data","setData","filldata","setfillData","popupInfo","setPopupInfo","showPopup","args","lnglat","lngLat","console","log","a","Promise","all","fetch","then","d","json","geoData","worldData","results","pointdata","map","fetchData","MapboxScene","center","pitch","style","zoom","position","top","left","right","bottom","name_en","margin","key","options","autoFit","source","scale","values","type","color","shape","opacity","size","parser","coordinates","field","count","active","option","handler","filter","v","strokeOpacity","strokeWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86ea557c.chunk.js","sourcesContent":["import MapboxScene from \"@antv/l7-react/es/component/MapboxScene\";\r\n\r\n\r\nimport * as React from 'react';\r\nimport {LayerEvent, LineLayer, PointLayer, PolygonLayer, Popup} from \"@antv/l7-react\";\r\nconst colors = [\r\n    '#732200',\r\n    '#CC3D00',\r\n    '#FF6619',\r\n    '#FF9466',\r\n    '#FFC1A6',\r\n    '#FCE2D7',\r\n    '#ffffff',\r\n].reverse();\r\nfunction joinData(geodata: any, ncovData: any) {\r\n    const ncovDataObj: any = {};\r\n    ncovData.forEach((item: any) => {\r\n        const {\r\n            countryName,\r\n            countryEnglishName,\r\n            currentConfirmedCount,\r\n            confirmedCount,\r\n            suspectedCount,\r\n            curedCount,\r\n            deadCount,\r\n        } = item;\r\n        if (countryName === '中国') {\r\n            if (!ncovDataObj[countryName]) {\r\n                ncovDataObj[countryName] = {\r\n                    countryName,\r\n                    countryEnglishName,\r\n                    currentConfirmedCount: 0,\r\n                    confirmedCount: 0,\r\n                    suspectedCount: 0,\r\n                    curedCount: 0,\r\n                    deadCount: 0,\r\n                };\r\n            } else {\r\n                ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\r\n                ncovDataObj[countryName].confirmedCount += confirmedCount;\r\n                ncovDataObj[countryName].suspectedCount += suspectedCount;\r\n                ncovDataObj[countryName].curedCount += curedCount;\r\n                ncovDataObj[countryName].deadCount += deadCount;\r\n            }\r\n        } else {\r\n            ncovDataObj[countryName] = {\r\n                countryName,\r\n                countryEnglishName,\r\n                currentConfirmedCount,\r\n                confirmedCount,\r\n                suspectedCount,\r\n                curedCount,\r\n                deadCount,\r\n            };\r\n        }\r\n    });\r\n    const geoObj: any = {};\r\n    geodata.features.forEach((feature: any) => {\r\n        const { name } = feature.properties;\r\n        geoObj[name] = feature.properties;\r\n        const ncov = ncovDataObj[name] || {};\r\n        feature.properties = {\r\n            ...feature.properties,\r\n            ...ncov,\r\n        };\r\n    });\r\n    return geodata;\r\n}\r\n\r\nconst World = React.memo(function Map() {\r\n    const [data, setData] = React.useState();\r\n    const [filldata, setfillData] = React.useState();\r\n    const [popupInfo, setPopupInfo] = React.useState();\r\n    React.useEffect(() => {\r\n        const fetchData = async () => {\r\n            const [geoData, ncovData] = await Promise.all([\r\n                fetch(\r\n                    'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json',\r\n                ).then((d) => d.json()),\r\n                // https://lab.isaaclin.cn/nCoV/api/area?latest=1\r\n                fetch('https://lab.isaaclin.cn/nCoV/api/area?lang=en').then((d) => d.json()),\r\n            ]);\r\n            const worldData = joinData(geoData, ncovData.results);\r\n            const pointdata = worldData.features.map((feature: any) => {\r\n                return feature.properties;\r\n            });\r\n            setfillData(worldData);\r\n            console.log(\"setData\")\r\n            console.log(pointdata)\r\n            setData(pointdata);\r\n        };\r\n        fetchData();\r\n    }, []);\r\n    function showPopup(args: any): void {\r\n        setPopupInfo({\r\n            lnglat: args.lngLat,\r\n            feature: args.feature,\r\n        });\r\n        console.log(popupInfo)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MapboxScene\r\n                map={{\r\n                    center: [110.19382669582967, 50.258134],\r\n                    pitch: 0,\r\n                    style: 'blank',\r\n                    zoom: 1,\r\n                }}\r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                }}\r\n            >\r\n                {popupInfo && (\r\n                    <Popup lnglat={popupInfo.lnglat} >\r\n                        {popupInfo.feature.name_en}\r\n                        <ul\r\n                            style={{\r\n                                margin: 0,\r\n                            }}\r\n                        >\r\n                            <li>geçerli Onaylanmış Sayım: {popupInfo.feature.currentConfirmedCount}</li>\r\n                            <li>Onaylanmış Sayısı: {popupInfo.feature.confirmedCount}</li>\r\n                            <li>tedavi sayısı: {popupInfo.feature.curedCount}</li>\r\n                            <li>ölü sayım: {popupInfo.feature.deadCount}</li>\r\n                        </ul>\r\n                    </Popup>\r\n                )}\r\n                {data && [\r\n                    <PolygonLayer\r\n                        key={'1'}\r\n                        options={{\r\n                            autoFit: true,\r\n                        }}\r\n                        source={{\r\n                            data: filldata,\r\n                        }}\r\n                        scale={{\r\n                            values: {\r\n                                confirmedCount: {\r\n                                    type: 'quantile',\r\n                                },\r\n                            },\r\n                        }}\r\n                        color={{\r\n                            values: '#ddd',\r\n                        }}\r\n                        shape={{\r\n                            values: 'fill',\r\n                        }}\r\n                        style={{\r\n                            opacity: 1,\r\n                        }}\r\n                    />,\r\n                    <LineLayer\r\n                        key={'3'}\r\n                        source={{\r\n                            data: filldata,\r\n                        }}\r\n                        size={{\r\n                            values: 0.6,\r\n                        }}\r\n                        color={{\r\n                            values: '#fff',\r\n                        }}\r\n                        shape={{\r\n                            values: 'line',\r\n                        }}\r\n                        style={{\r\n                            opacity: 1,\r\n                        }}\r\n                    />,\r\n                    <PointLayer\r\n                        key={'2'}\r\n                        options={{\r\n                            autoFit: true,\r\n                        }}\r\n                        source={{\r\n                            data,\r\n                            parser: {\r\n                                type: 'json',\r\n                                coordinates: 'centroid',\r\n                            },\r\n                        }}\r\n                        scale={{\r\n                            values: {\r\n                                confirmedCount: {\r\n                                    type: 'log',\r\n                                },\r\n                            },\r\n                        }}\r\n                        color={{\r\n                            field: 'confirmedCount',\r\n                            values: (count) => {\r\n                                return count > 10000\r\n                                    ? colors[6]\r\n                                    : count > 1000\r\n                                        ? colors[5]\r\n                                        : count > 500\r\n                                            ? colors[4]\r\n                                            : count > 100\r\n                                                ? colors[3]\r\n                                                : count > 10\r\n                                                    ? colors[2]\r\n                                                    : count > 1\r\n                                                        ? colors[1]\r\n                                                        : colors[0];\r\n                            },\r\n                        }}\r\n                        shape={{\r\n                            values: 'circle',\r\n                        }}\r\n                        active={{\r\n                            option: {\r\n                                color: '#0c2c84',\r\n                            },\r\n                        }}\r\n                        size={{\r\n                            field: 'confirmedCount',\r\n                            values: [0, 30],\r\n                        }}\r\n                        style={{\r\n                            opacity: 0.8,\r\n                        }}\r\n                    >\r\n                        <LayerEvent type=\"mousemove\" handler={showPopup} />\r\n                    </PointLayer>,\r\n                    <PointLayer\r\n                        key={'5'}\r\n                        source={{\r\n                            data,\r\n                            parser: {\r\n                                type: 'json',\r\n                                coordinates: 'centroid',\r\n                            },\r\n                        }}\r\n                        color={{\r\n                            values: '#fff',\r\n                        }}\r\n                        shape={{\r\n                            field: 'name_en',\r\n                            values: 'text',\r\n                        }}\r\n                        filter={{\r\n                            field: 'currentConfirmedCount',\r\n                            values: (v) => {\r\n                                return v > 500;\r\n                            },\r\n                        }}\r\n                        size={{\r\n                            values: 12,\r\n                        }}\r\n                        style={{\r\n                            opacity: 1,\r\n                            strokeOpacity: 1,\r\n                            strokeWidth: 0,\r\n                        }}\r\n                    >\r\n                        <LayerEvent type=\"mousemove\" handler={showPopup} />\r\n                    </PointLayer>,\r\n                ]}\r\n            </MapboxScene>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\nexport default World;\r\n","import React from 'react';\nimport './App.css';\nimport Map from \"./mapPage\";\nimport World from \"./corna\";\n\nfunction App() {\n\n\n\n  return (\n      <World/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}